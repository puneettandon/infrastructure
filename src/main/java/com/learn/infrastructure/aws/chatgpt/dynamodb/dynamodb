AWS DynamoDB - Complete Guide with Examples

1. What is AWS DynamoDB?
    Amazon DynamoDB is a fully managed NoSQL database service that provides high availability, scalability, and low-latency access to structured data.
    Key Features:
        - Serverless → No need to manage database servers.
        - Auto-Scaling → Handles millions of requests per second.
        - Key-Value & Document Database → Supports flexible data models.
        - Single-Digit Millisecond Latency → Ideal for high-performance applications.
        - Built-in Security & Backup → Supports encryption, IAM authentication.

    Common Use Cases:
        - Real-time applications (Gaming, IoT, Chat Apps)
        - Serverless applications (AWS Lambda + DynamoDB)
        - Caching layer for fast lookups
        - Scalable e-commerce catalogs

2. DynamoDB Key Concepts
    Concept	                                                    Description
    Table	                                            Collection of items (similar to a table in RDBMS).
    Item	                                            A single record (similar to a row in RDBMS).
    Attributes	                                        Key-value pairs (columns in RDBMS).
    Primary Key	                                        Unique identifier for each item.
    Partition Key	                                    Determines how data is distributed across partitions.
    Sort Key (Optional)	                                Allows range-based queries.
    Secondary Indexes	                                Alternate ways to query the table efficiently.
    Example Table: "Users"
        UserID (Partition Key)	                        Name	                Email	                Age
                U123	                               John Doe	             john@example.com	         25
                U456	                               Alice Smith	         alice@example.com	         30



3. DynamoDB Primary Key Types
        Primary Key Type	                        Description	                                Example
        Partition Key Only	                    Uniquely identifies each item	              UserID = "U123"
        Partition Key + Sort Key	            Enables range-based queries	      OrderID = "O123", OrderDate = "2024-02-12"
    When to use each?
        - Partition Key Only → Best for lookup operations (e.g., getting user profile).
        - Partition + Sort Key → Best for sorted queries (e.g., fetch user orders by date).




4. DynamoDB Read & Write Operations

    Basic CRUD Operations
        # Create a DynamoDB table
        aws dynamodb create-table \
          --table-name Users \
          --attribute-definitions AttributeName=UserID,AttributeType=S \
          --key-schema AttributeName=UserID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST

    Insert an Item
        aws dynamodb put-item \
          --table-name Users \
          --item '{
            "UserID": {"S": "U123"},
            "Name": {"S": "John Doe"},
            "Email": {"S": "john@example.com"},
            "Age": {"N": "25"}
          }'

    Get an Item by Key
        aws dynamodb get-item \
          --table-name Users \
          --key '{ "UserID": {"S": "U123"} }'

    Update an Item
        aws dynamodb update-item \
          --table-name Users \
          --key '{ "UserID": {"S": "U123"} }' \
          --update-expression "SET Age = :new_age" \
          --expression-attribute-values '{ ":new_age": {"N": "26"} }'
    Delete an Item
        aws dynamodb delete-item \
          --table-name Users \
          --key '{ "UserID": {"S": "U123"} }'




5. Querying Data in DynamoDB

    Query with Partition Key
        aws dynamodb query \
          --table-name Orders \
          --key-condition-expression "UserID = :user" \
          --expression-attribute-values '{ ":user": {"S": "U123"} }'
    This fetches all orders for UserID "U123".

    Query with Sort Key (Range Queries)
        aws dynamodb query \
          --table-name Orders \
          --key-condition-expression "UserID = :user AND OrderDate BETWEEN :start AND :end" \
          --expression-attribute-values '{ ":user": {"S": "U123"}, ":start": {"S": "2024-01-01"}, ":end": {"S": "2024-01-31"} }'
    This fetches all orders for UserID "U123" within January 2024.




6. DynamoDB Secondary Indexes

   What Are Secondary Indexes?
   Secondary Indexes allow querying data using attributes other than the primary key.
           Type of Index	                                        Best For
           Global Secondary Index (GSI)	                Queries across the entire table
           Local Secondary Index (LSI)	                Queries within a partition
   Example:
   A "Users" table with "UserID" as a Partition Key.
        - To query by Email, create a GSI with "Email" as the Partition Key.

     Creating a Global Secondary Index
           aws dynamodb update-table \
             --table-name Users \
             --attribute-definitions AttributeName=Email,AttributeType=S \
             --global-secondary-index-updates '[
               {
                 "Create": {
                   "IndexName": "EmailIndex",
                   "KeySchema": [
                     { "AttributeName": "Email", "KeyType": "HASH" }
                   ],
                   "Projection": { "ProjectionType": "ALL" }
                 }
               }
             ]'
     Now you can query users by Email instead of UserID.



8. DynamoDB Read & Write Capacity Modes
       Mode	                            Description	                                            Best For
       Provisioned Mode	        Manually set Read & Write capacity	                    Predictable workloads
       On-Demand Mode	        Auto-scales Read/Write units	                        Unpredictable workloads
       Use On-Demand if traffic is unpredictable to avoid over-provisioning costs.



9. DynamoDB Streams (Real-Time Event Processing)
    - DynamoDB Streams capture changes (INSERT, UPDATE, DELETE) in real-time.
    - Works with AWS Lambda to trigger functions on database changes.

    Enable DynamoDB Stream
        aws dynamodb update-table \
          --table-name Orders \
          --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES

    Lambda Function for DynamoDB Stream
        import json

        def lambda_handler(event, context):
            for record in event['Records']:
                print(f"Change detected: {json.dumps(record)}")

    Now, every time an order is placed, a Lambda function is triggered.




9. DynamoDB Best Practices
    - Use Partition + Sort Key for efficient queries
    - Use GSIs to support different query patterns
    - Enable DynamoDB Streams for real-time updates
    - Use On-Demand mode for unpredictable workloads
    - Use TTL (Time-To-Live) for auto-expiring records


