1. What is AWS Lambda?
    - AWS Lambda is a serverless compute service that lets you run code without provisioning or managing servers.
    - You upload your code, and Lambda runs it only when needed and scales automatically.

2. Key Concepts
    | Concept               | Description                                                                         |
    | --------------------- | ----------------------------------------------------------------------------------- |
    | **Function**          | The unit of deployment – your code + runtime + configuration                        |
    | **Event Source**      | A trigger that invokes your function (e.g., S3 upload, API Gateway, DynamoDB, etc.) |
    | **Runtime**           | Language environment (e.g., Java, Python, Node.js, Go)                              |
    | **Handler**           | Entry point of your Lambda function                                                 |
    | **Execution Context** | The container Lambda runs your function in (can be reused – "warm start")           |
    | **IAM Role**          | Lambda uses this role to interact with AWS services                                 |
    | **Timeout**           | Max duration your Lambda function can run (default: 3s, max: 15 minutes)            |



3. How It Works
    - You write your code and deploy it to Lambda.
    - You define a trigger, like an S3 file upload or API Gateway call.
    - AWS runs your code only when the trigger fires.
    - You pay only for the compute time used (measured in milliseconds).



4. Sample Java Example (Spring Boot + AWS Lambda)
    public class HelloLambda implements RequestHandler<Map<String, String>, String> {
        @Override
        public String handleRequest(Map<String, String> input, Context context) {
            return "Hello " + input.get("name");
        }
    }

    For more complex apps, you can use aws-serverless-java-container to run Spring Boot or Micronaut in Lambda.


5. Common Event Sources
    | Service                           | Use Case                               |
    | --------------------------------- | -------------------------------------- |
    | **API Gateway**                   | Run Lambda on HTTP request (REST APIs) |
    | **S3**                            | Run Lambda when a file is uploaded     |
    | **DynamoDB Streams**              | Process table change events            |
    | **SNS / SQS**                     | Async messaging                        |
    | **CloudWatch Events / Scheduler** | Run Lambda on a schedule               |
    | **Step Functions**                | Chain Lambdas into workflows           |


6. Deployment Methods
    Console: Write/upload directly
    ZIP Upload: Package code + dependencies
    AWS CLI / SAM / CDK / Terraform
    Container Image: Up to 10 GB Docker images


7. Lambda Limits (Default)
    | Limit                   | Value                                     |
    | ----------------------- | ----------------------------------------- |
    | Timeout                 | 15 minutes                                |
    | Memory                  | 128 MB to 10,240 MB                       |
    | Disk (ephemeral `/tmp`) | 512 MB                                    |
    | Deployment package      | ZIP: 50 MB (compressed), Container: 10 GB |


8. Permissions and IAM
    - Grant Lambda permissions to call AWS services using execution role
    - Use resource-based policies for allowing other services to invoke the Lambda



9. Monitoring
    - CloudWatch Logs: All Lambda output is logged
    - CloudWatch Metrics: Invocations, errors, duration, etc.
    - X-Ray: Tracing and profiling

10. Advanced Features
    | Feature                     | Description                                                        |
    | --------------------------- | ------------------------------------------------------------------ |
    | **Lambda Layers**           | Reuse code (e.g., shared libraries across functions)               |
    | **Environment Variables**   | Inject config at runtime                                           |
    | **Provisioned Concurrency** | Avoid cold starts                                                  |
    | **Async Invocation + DLQ**  | Retry + dead-letter queue for failed executions                    |
    | **Lambda Destinations**     | Forward result/success/failure to another service (e.g., SNS, SQS) |



11. Real-World Use Cases
    1. API backend using Lambda + API Gateway
    2. File processing on S3 uploads (resize image, scan, etc.)
    3. Stream processing from DynamoDB or Kinesis
    4. Scheduled jobs using CloudWatch Events
    5. Chatbots / Event-driven automation using Lambda + Step Functions


12. Best Practices
    - Keep functions small and focused
    - Use layers for shared libraries
    - Keep initialization logic outside the handler
    - Use provisioned concurrency for low-latency APIs
    - Set up proper timeouts, retries, and alerts
    - Use SQS or EventBridge for decoupling