 What is Amazon RDS?
    Amazon RDS is a managed relational database service from AWS.
    It lets you run SQL databases without worrying about infrastructure tasks
    like hardware provisioning, backups, patching, and scaling.


Supported RDS Engines
    | Engine            | Use Case                                                       |
    | ----------------- | -------------------------------------------------------------- |
    | **Amazon Aurora** | High performance, cloud-native (MySQL & PostgreSQL compatible) |
    | **MySQL**         | Most popular open-source DB                                    |
    | **PostgreSQL**    | Advanced features, strict SQL compliance                       |
    | **MariaDB**       | Community-driven fork of MySQL                                 |
    | **Oracle**        | Enterprise features and PL/SQL support                         |
    | **SQL Server**    | Microsoft ecosystem apps                                       |



Key Features of RDS
    | Feature                 | Description                                                |
    | ----------------------- | ---------------------------------------------------------- |
    | **Automated Backups**   | Daily snapshots + transaction logs                         |
    | **Multi-AZ Deployment** | High availability with automatic failover                  |
    | **Read Replicas**       | Offload read traffic / scale reads                         |
    | **Monitoring**          | Integrated with CloudWatch                                 |
    | **Security**            | VPC, IAM, KMS encryption, TLS                              |
    | **Automatic Patching**  | Handles minor DB version patches                           |
    | **Storage Scaling**     | Auto-scaling storage (Aurora or manually in other engines) |



RDS Architecture Options
    1. Single-AZ (Dev/Test Use)
        - One instance
        - No automatic failover

    2. Multi-AZ (Production)
        - Primary + synchronous standby
        - Failover handled automatically

    3. Read Replicas
        - Async replication for read scaling
        - Used for reporting, analytics, or backups



When to Use RDS vs. Alternatives
    | Use Case                    | Use                         |
    | --------------------------- | --------------------------- |
    | Managed SQL database        | ✅ RDS                       |
    | Need serverless + scaling   | ✅ Aurora Serverless v2      |
    | NoSQL data                  | ❌ Use DynamoDB              |
    | Full control over DB server | ❌ Use EC2 + self-managed DB |



Getting Started with RDS
    1. Create an RDS Instance
        - Engine: MySQL, PostgreSQL, etc.
        - Instance class: e.g., db.t3.micro, db.r5.large
        - Storage: EBS gp3/gp2
        - DB name, username, password
        - Enable encryption, backup, Multi-AZ

    2. Security Setup
        - Place RDS in a VPC
        - Attach to private subnet or public subnet if needed
        - Use security groups to allow inbound traffic (e.g., from EC2 or Lambda)

    3. Connect from Application
        In Java (Spring Boot):
            spring.datasource.url=jdbc:mysql://your-rds-endpoint.amazonaws.com:3306/yourdb
            spring.datasource.username=admin
            spring.datasource.password=yourpassword


        Or use a connection pool like HikariCP for production use.


Monitoring and Observability

    | Tool                         | What It Shows                        |
    | ---------------------------- | ------------------------------------ |
    | **CloudWatch**               | CPU, memory, IOPS, connections, etc. |
    | **Enhanced Monitoring**      | OS-level metrics (more detailed)     |
    | **RDS Performance Insights** | Query-level performance analytics    |
    | **AWS Trusted Advisor**      | Best practice recommendations        |



Security Best Practices
    - Enable encryption at rest using KMS
    - Use IAM database authentication (for MySQL/PostgreSQL)
    - Restrict access using security groups
    - Enable audit logs if supported
    - Rotate credentials using Secrets Manager


Backup & Restore
    Automated backups: daily + transaction logs (retain for 1–35 days)
    Manual snapshots: triggered by user
    Restore options:
        Restore to latest point-in-time
        Restore from snapshot (new DB instance)



Maintenance & Scaling
    Vertical Scaling: Change instance type (e.g., t3.medium → r5.large)
    Horizontal Scaling:
        Aurora: up to 15 read replicas
        MySQL/PostgreSQL: 5 read replicas
        Use Aurora Serverless v2 if you want auto-scaling compute capacity


Pricing Overview
    | Cost Factor          | Notes                          |
    | -------------------- | ------------------------------ |
    | Instance hours       | Per hour of DB usage           |
    | Storage              | Per GB per month               |
    | Backups              | Free up to DB size (automated) |
    | Data transfer        | Free within same AZ/VPC        |
    | Performance Insights | Extra charges                  |


    Use RDS Free Tier: 750 hours/month of db.t3.micro (for MySQL/PostgreSQL) in your first year



Integrations

    | AWS Service         | Usage                              |
    | ------------------- | ---------------------------------- |
    | **Lambda**          | Call RDS via VPC (JDBC connection) |
    | **Secrets Manager** | Store DB credentials               |
    | **CloudWatch Logs** | View slow query logs               |
    | **S3**              | Import/export data                 |
    | **Glue / Athena**   | Analyze RDS data with SQL          |
    | **DMS**             | Migrate data to/from RDS           |


Best Practices Summary
    - Use Multi-AZ for production workloads
    - Use Read Replicas to scale reads
    - Encrypt data at rest and in transit
    - Use parameter groups to tune DB settings
    - Rotate credentials using Secrets Manager
    - Monitor long-running queries and connections
    - Use Aurora for modern, highly scalable SQL workloads



