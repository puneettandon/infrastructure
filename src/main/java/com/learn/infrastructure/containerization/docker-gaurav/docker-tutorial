Docker Commands

    docker version
    docker info

    docker --help | less

                Management Commands are parent command
                commands are child command

                Usage:  docker [OPTIONS] COMMAND

                A self-sufficient runtime for containers

                Options:
                      --config string      Location of client config files (default "/Users/puntando/.docker")
                  -c, --context string     Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with "docker context use")
                  -D, --debug              Enable debug mode
                  -H, --host list          Daemon socket(s) to connect to
                  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
                      --tls                Use TLS; implied by --tlsverify
                      --tlscacert string   Trust certs signed only by this CA (default "/Users/puntando/.docker/ca.pem")
                      --tlscert string     Path to TLS certificate file (default "/Users/puntando/.docker/cert.pem")
                      --tlskey string      Path to TLS key file (default "/Users/puntando/.docker/key.pem")
                      --tlsverify          Use TLS and verify the remote
                  -v, --version            Print version information and quit

                Management Commands:
                  builder     Manage builds
                  buildx*     Build with BuildKit (Docker Inc., v0.6.1-docker)
                  compose*    Docker Compose (Docker Inc., v2.0.0-rc.2)
                  config      Manage Docker configs
                  container   Manage containers
                  context     Manage contexts
                  image       Manage images
                  manifest    Manage Docker image manifests and manifest lists
                  network     Manage networks
                  node        Manage Swarm nodes
                  plugin      Manage plugins
                  scan*       Docker Scan (Docker Inc., v0.8.0)
                  secret      Manage Docker secrets
                  service     Manage services
                  stack       Manage Docker stacks
                  swarm       Manage Swarm
                  system      Manage Docker
                  trust       Manage trust on Docker images
                  volume      Manage volumes

                Commands:
                  attach      Attach local standard input, output, and error streams to a running container
                  build       Build an image from a Dockerfile
                  commit      Create a new image from a container's changes
                  cp          Copy files/folders between a container and the local filesystem
                  create      Create a new container
                  diff        Inspect changes to files or directories on a container's filesystem
                  events      Get real time events from the server
                  exec        Run a command in a running container
                  export      Export a container's filesystem as a tar archive
                  history     Show the history of an image
                  images      List images
                  import      Import the contents from a tarball to create a filesystem image
                  info        Display system-wide information
                  inspect     Return low-level information on Docker objects
                  kill        Kill one or more running containers
                  load        Load an image from a tar archive or STDIN
                  login       Log in to a Docker registry
                  logout      Log out from a Docker registry
                  logs        Fetch the logs of a container
                  pause       Pause all processes within one or more containers
                  port        List port mappings or a specific mapping for the container
                  ps          List containers
                  pull        Pull an image or a repository from a registry
                  push        Push an image or a repository to a registry
                  rename      Rename a container
                  restart     Restart one or more containers
                  rm          Remove one or more containers
                  rmi         Remove one or more images
                  run         Run a command in a new container
                  save        Save one or more images to a tar archive (streamed to STDOUT by default)
                  search      Search the Docker Hub for images
                  start       Start one or more stopped containers
                  stats       Display a live stream of container(s) resource usage statistics
                  stop        Stop one or more running containers
                  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
                  top         Display the running processes of a container


                -------------------------------------------------------------------------------------------------------


    docker container ls - get list of active running containers (new way)
    docker ps (old way)
    docker image ls - get list of active images
    docker network ls

    docker container run redis - create docker container
        redis -image name
        If not available download from dockerhub
        Running instance of image is container

    docker container ls -a
            get all existing run container list

    docker container rm <container-id>
            to remove container
            can be remove with unique id

    docker container rm <container-id> <container-id>
            for removing multiple containers

    docker container start <container-id>
            to start the container

    docker container stop <container-id>
            to stop the container

    docker container run -d redis sleep 30
            will run container in background -d detach mode


    docker container run -it ubuntu /bin/bash
            to get inside the ubuntu -it interactive
            and can install software or check file inside the ubuntu os

    docker container ls -aq
            list of all ids of container

    docker container rm $(docker container ls -aq)
            will delete all containers


    docker container inspect <container-id>
            will provide all the details of container
    docker container inspect <container-id> | less

    docker container logs <container-id>
            to get the logs of that container

    docker container top <container-id>
            to get all the processes running inside the container


    ps -aux
        all the processes running in the machine


    docker container run -d -p 3600:80 nginx
         port-forwarding all request from port 3600 to 80 port of container

    docker container run --name test-name
         to assign name to container


    docker container exec -it <container-id> /bin/bash
            to run command inside the container here running bash terminal

    docker container rename <container-id>  container-name
            to rename container

    docker container restart <container-id>
            restart the container

    docker container attach <container-id>
            to attach container will run in frontend

    docker container kill <container-id>

    docker container wait <container-id>

    docker container pause <container-id>
            will not able to access that container port

    docker container unpause <container-id>
             will able to access that container port after this.

    docker container prune
            delete all containers which are not in use

    docker container port <container-id>
            provide port

    docker container create <image-name>
            docker container create ubuntu
            only create container with this image

    docker container start <container-id>
            will start the container

    docker image ls
            list of images

    docker container diff 615
            whenever do any change in container

    docker container -it ubuntu     /bin/bash/
            open ubuntu terminal


    watch 'docker container diff <container-id>'


    copy files from local directory to docker container
            docker container cp test/   <container-id>:/pathwheretocopy


    docker container attach <container-id>

---------------
    docker container run -it ubuntu /bin/bash
    apt-get update
    apt-get install tree git -y                 ----> installing  tree and git in container

    Exporting Docker container

    docker container export <container-id> > my_ubuntu_tree_git.tar
    docker container export <container-id> -o my_ubuntu_tree_git1.tar

    Importing Image

    docker image my_ubuntu_tree_git.tar my_ubuntu_t_g
            will create new docker image from export thing


    Create docker image from running container

    docker container commit --author "puneet" -m "this is test commit" <container-id> my_test_image

    docker container run -it my_test_image /bin/bash

    can image this image to docker hub so anyone can download from there.

    docker container rm -f <container-id>
            stop and delete container

-----------------------------------------
    docker pull push tag

    docker pull ubuntu:<version>
    docker pull ubuntu:14.04


    docker image tag <tag-name> hub.docker.com/<account-nam>/image-name
    docker image tag my_ubuntu_t_g  hub.docker.com/puneettandon/my_ubuntu_t_g

    docker push <account-name>/<image-name>
    docker push puneettandon/my_ubuntu_t_g
    docker login
        provide username and password

    docker pull puneettandon/my_ubutnu_t_g

------------------------------------------------------

    docker remove,inspect,list and history

    docker image ls
        will list docker images
        docker images / docker image ls    ---> both are same

    docker image ls --format '{{.ID}}, {{.Repository}}'
          format accordingly

    docker image history jenkins

    docker image rm <image-name>
            all unattached images will be removed

    docker image rm -f <image-name>
            forcefully remove image

    docker rmi <image-name>
            remove image shortcut


    docker image inspect wordpress | less
            detailed information of docker image

    docker image prune
            delete all unused images


    docker image save <image-name>  > image.tar
            will save the image
            will put all images in tar if version not specified
        docker image rm <image-name>
        again load the save image ---tar file

    docker image load < image.tar
           load the image
           name repository version all information

    docker container export
            will give tar file
            create image of running container

    docker image import
            only single layer
            of file system


  ----------------------------------------------------------------------------------------------------------------------

  Create Docker image using Docker Files


   Default docker file name - Dockerfile
   can be customized but need to mention your customized file name while building image
    - f       -----> to specify file name

    From <image-name>

    docker image build -t myubuntu:1 .

    docker container run -it myubuntu:1

    vi Dockerfile

    From ubuntu:16.04

    vi Dockerfile

     From ubuntu:16.04
     Run apt-get update && apt-get install -y tree

------
    docker container run -it myubuntu:2
    docker image build -t myubuntu:2 .

    each line new layer

-------

    vi Dockerfile

     From ubuntu:14.04
     Run apt-get update && apt-get install -y tree
     Run touch /tmp/1.txt
     Run touch /tmp/2.txt
     Run touch /tmp/3.txt
     Run touch /tmp/4.txt
     Run touch /tmp/5.txt
     Run touch /tmp/6.txt

---------

    docker image build -t myubuntu:1 .

    Layer architecture of Docker

------------------------

    vi Dockerfile

     FROM ubuntu:14.04
     LABEL name="puneet"
     LABEL email="puneet@gmail.com"
     ENV NAME puneet
     ENV PASS password


    Label -- to provide any kind of information ....will be available in inspect image
    env --
    docker image build -t myubuntu:10 .

    docker image inspect myubuntu:10

------------------------

    vi Dockerfile

         FROM ubuntu:14.04
         RUN pwd>/tmp/1stpwd.txt
         RUN cd /tmp/
         RUN pwd>/2ndpwd.txt

        to change the working dir

         FROM ubuntu:14.04
         RUN pwd>/tmp/1stpwd.txt
         RUN cd /tmp/
         RUN pwd>/2ndpwd.txt
         WORKDIR /tmp
         RUN pwd>/3rdpwd.txt

------------------------


    vi Dockerfile

        FROM ubuntu:14.04
        ENV NAME puneet
        ENV PASS password
        RUN useradd -d /home/puneet -g root -G sudo -m -p  $(echo "$PASS" | openssl  passwd -l -stdin) $NAME
        RUN whoami   > /tmp/Istwhoami.txt
        USER $NAME
        RUN whoami   > /tmp/2ndwhoami.txt

        build the image and check how to switch user from above commands


------------------------------------

    vi Dockerfile

        FROM ubuntu:14.04
        RUN mkdir -p /tmp/project
        COPY testProject /tmp/project

        build the image and check whether new dir is created and file copied from one location to another



        FROM ubuntu:14.04
        RUN mkdir -p /tmp/project
        ADD testProject /tmp/project

        copy commands copy fully  tar file
        but Add command extracts the content and copy it .
------------------------------------------


     FROM ubuntu:14.04
     CMD ["python"]

     CMD can be only one in one file
     If multiple then last will be considered















































